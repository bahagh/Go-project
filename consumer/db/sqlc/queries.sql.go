// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const getPendingTasks = `-- name: GetPendingTasks :many
SELECT id, type, value, state, creation_time, last_update_time FROM tasks WHERE state = 'received' ORDER BY creation_time LIMIT $1
`

func (q *Queries) GetPendingTasks(ctx context.Context, limit int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getPendingTasks, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Value,
			&i.State,
			&i.CreationTime,
			&i.LastUpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTask = `-- name: InsertTask :one

INSERT INTO tasks (type, value, state)
VALUES ($1, $2, 'received')
RETURNING id, type, value, state, creation_time, last_update_time
`

type InsertTaskParams struct {
	Type  int32
	Value int32
}

// queries.sql
func (q *Queries) InsertTask(ctx context.Context, arg InsertTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, insertTask, arg.Type, arg.Value)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.State,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const updateTaskState = `-- name: UpdateTaskState :exec
UPDATE tasks
SET state = $2, last_update_time = NOW()
WHERE id = $1
`

type UpdateTaskStateParams struct {
	ID    int32
	State string
}

func (q *Queries) UpdateTaskState(ctx context.Context, arg UpdateTaskStateParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskState, arg.ID, arg.State)
	return err
}
